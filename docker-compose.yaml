version: '3'

services:
  traefik:
    # The official v2.0 Traefik docker image
    image: traefik:v2.1
    container_name: "traefik"
    # Enables the web UI and tells Traefik to listen to docker
    command: 
      #- "--log.level=DEBUG"
      - "--log.level=ERROR"
      - "--api.insecure=true"
      - "--providers.docker=true"
      #- "--providers.docker.exposedbydefault=false"
      #- "--entrypoints.vault.address=:443"
      #- "--entrypoints.consul.address=:444"
      #- "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      #- "--certificatesresolvers.myresolver.acme.email=seanmarman@gmail.com"
      #- "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      # The HTTP port
      - "80:80"
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  drone-server:
    #image: drone/drone:1.6.5
    image: drone/drone:1
    container_name: drone-server
    restart: always
    depends_on:
      - traefik
    environment:
      - DRONE_AGENTS_ENABLED=true
      - DRONE_GITHUB_CLIENT_ID=${CLIENT_ID}
      - DRONE_GITHUB_CLIENT_SECRET=${CLIENT_SECRET}
      - DRONE_RPC_SECRET=${SHARED_SECRET}
      - DRONE_SERVER_HOST=drone-server.local.seanhome.xyz
      - DRONE_GITHUB_SKIP_VERIFY=true
      - DRONE_SERVER_PROTO=http
      - DRONE_USER_CREATE=username:droneadm,machine:false,admin:true
    volumes:
      - "./drone:/data"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - "traefik.http.routers.drone-server.rule=Host(`drone-server.local.seanhome.xyz`)"
      - "traefik.http.services.drone-server.loadbalancer.server.port=80"

  drone-runner:
    #image: drone/drone-runner-docker:1.2.1
    image: drone/drone-runner-docker:1
    container_name: drone-runner
    depends_on:
      - drone-server
    restart: always
    environment:
      - DRONE_RPC_SECRET=${SHARED_SECRET}
      - DRONE_RPC_SKIP_VERIFY=true
      - DRONE_RPC_HOST=drone-server.local.seanhome.xyz
      - DRONE_RPC_PROTO=http
      - DRONE_RUNNER_CAPACITY=2
    #ports:
    #  - 3000:3000
    labels:
      - "traefik.http.routers.drone-runner.rule=Host(`drone-runner.local.seanhome.xyz`)"
      - "traefik.http.services.drone-runner.loadbalancer.server.port=3000"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    

  consul:
    build: 
      context: ./consul/
      dockerfile: Dockerfile
    container_name: consul
    volumes:
      - "./extras/consul-vault-policy.hcl:/consul/vault-policy.hcl"
      - "./consul-volume:/consul/data/"
        #    networks:
        #      - consul-network
    restart: always
    labels:
      #- "traefik.http.routers.vault.rule=Host(`consul.docker.localhost`)"
      - "traefik.http.routers.consul.rule=Host(`consul.local.seanhome.xyz`)"
      - "traefik.http.services.consul.loadbalancer.server.port=8500"
      #- "traefik.http.routers.consul.entrypoints=consul"
      #- "traefik.http.routers.consul.tls.certresolver=myresolver"
      #- "traefik.http.services.consul.loadbalancer.server.scheme=https"
    #ports: 
    #  - "8300"
    #  - "8301"
    #  - "8302"
    #  - "8500"
    #  - "8600"

  vault:
    build:
      context: ./vault/
      dockerfile: Dockerfile
    container_name: vault
    #ports:
    #  - "8200"
    #  - "8302"
    #  - "8500"
    #  - "8600"
    restart: always
    cap_add:
      - IPC_LOCK
    volumes:
      - "./vault-volume:/vault/data/"
    labels:
      #- "traefik.http.routers.vault.rule=Host(`vault.docker.localhost`)"
      - "traefik.http.routers.vault.rule=Host(`vault.local.seanhome.xyz`)"
      - "traefik.http.services.vault.loadbalancer.server.port=8200"
      #- "traefik.http.routers.vault.entrypoints=vault"
      #- "traefik.http.routers.vault.tls.certresolver=myresolver"
      #- "traefik.http.services.vault.loadbalancer.server.scheme=https"
      
  goapi:
    container_name: goapi
    image: "smarman/ubuntudev:0.1.7"
    volumes:
      - ./golang:/srv
    command: ["tail", "-f", "/dev/null"]
    labels:
      - "traefik.http.routers.goapi.rule=Host(`goapi.local.seanhome.xyz`)"
      - "traefik.http.services.goapi.loadbalancer.server.port=8090"

  database:
    container_name: postgres
    image: "postgres"
    env_file:
      - psql.env
    volumes:
      - ./clubdata.sql:/docker-entrypoint-initdb.d/clubdata.sql
    labels:
      - "traefik.http.routers.psql.rule=Host(`psql.local.seanhome.xyz`)"
      - "traefik.http.services.psql.loadbalancer.server.port=5432"
